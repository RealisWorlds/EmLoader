import { readFileSync, mkdirSync, writeFileSync} from 'fs';
import { Examples } from '../utils/examples.js';
import { getCommandDocs } from '../agent/commands/index.js';
import { getSkillDocs } from '../agent/library/index.js';
import { SkillLibrary } from "../agent/library/skill_library.js";
import { stringifyTurns } from '../utils/text.js';
import { getCommand } from '../agent/commands/index.js';
import settings from '../../settings.js';
import { QdrantClient } from '@qdrant/js-client-rest';

import { Gemini } from './gemini.js';
import { GPT } from './gpt.js';
import { Claude } from './claude.js';
import { Mistral } from './mistral.js';
import { ReplicateAPI } from './replicate.js';
import { Local } from './local.js';
import { Novita } from './novita.js';
import { GroqCloudAPI } from './groq.js';
import { HuggingFace } from './huggingface.js';
import { Qwen } from "./qwen.js";
import { Grok } from "./grok.js";

// Add all the code before the initVectorMemory method, which we'll replace with our updated version
// This is a partial file containing only the modified method and placeholders for the rest

export class Prompter {
    constructor(agent, fp) {
        // Constructor code (unchanged)
    }

    // Other methods (unchanged)

    // Initialize vector database for long-term memory
    async initVectorMemory() {
        // Initialize flags for vector memory and other embeddings
        this.useVectorMemory = false;
        this.useOtherEmbeddings = true;
        
        try {
            // Check if vector database should be disabled
            if (this.profile.disableVectorDb === true) {
                console.log('Vector database is disabled in profile settings');
                this.vectorClient = null;
                return;
            }
            
            // Default Qdrant settings - can be overridden in profile
            const qdrantConfig = this.profile.vectorDb || {
                url: 'http://localhost:6333',
                collectionName: `${this.agent.name}_memories`,
                vectorSize: 1536  // Default for many embedding models
            };
            
            console.log('Initializing vector memory with config:', JSON.stringify(qdrantConfig, null, 2));
            
            // Initialize Qdrant client
            this.vectorClient = new QdrantClient({ 
                url: qdrantConfig.url 
            });
            
            this.collectionName = qdrantConfig.collectionName;
            const vectorSize = qdrantConfig.vectorSize;
            
            // Check if collection exists, create if it doesn't
            try {
                await this.vectorClient.getCollection(this.collectionName);
                console.log(`Vector memory collection "${this.collectionName}" already exists.`);
                this.useVectorMemory = true;
                
                // Disable other embeddings if configured
                if (this.profile.disableOtherEmbeddingsWhenVectorDbAvailable === true) {
                    console.log('Vector database is available - disabling other embeddings as configured');
                    this.useOtherEmbeddings = false;
                }
            } catch (error) {
                // Collection doesn't exist, create it
                console.log(`Creating vector memory collection "${this.collectionName}" with dimension ${vectorSize}`);
                await this.vectorClient.createCollection(this.collectionName, {
                    vectors: {
                        size: vectorSize,
                        distance: 'Cosine'
                    }
                });
                console.log(`Created vector memory collection "${this.collectionName}"`);
                this.useVectorMemory = true;
                
                // Disable other embeddings if configured
                if (this.profile.disableOtherEmbeddingsWhenVectorDbAvailable === true) {
                    console.log('Vector database is available - disabling other embeddings as configured');
                    this.useOtherEmbeddings = false;
                }
            }
            
            console.log("Vector database initialized successfully.");
        } catch (error) {
            console.error('Failed to initialize vector memory:', error);
            this.vectorClient = null;
            this.useVectorMemory = false;
            this.useOtherEmbeddings = true;
        }
    }

    // Now modify the getEmbedding method to respect the useOtherEmbeddings flag
    async getEmbedding(text) {
        if (!this.embedding_model) {
            console.warn('No embedding model available');
            return null;
        }
        
        // Check if other embeddings should be used
        if (this.useVectorMemory && !this.useOtherEmbeddings) {
            console.log('Using only vector database embeddings - skipping other embedding models');
            // Only proceed if this is for vector memory purposes
            if (this._isVectorMemoryOperation) {
                this._isVectorMemoryOperation = false; // Reset the flag
            } else {
                return null;
            }
        }
        
        try {
            // Using the embed method that exists in the model implementations
            return await this.embedding_model.embed(text);
        } catch (error) {
            console.error('Error generating embedding:', error);
            return null;
        }
    }

    // Modify storeMemory to set a flag before calling getEmbedding
    async storeMemory(text, metadata = {}) {
        if (!this.vectorClient || !this.embedding_model) {
            console.warn('Cannot store memory: Vector client or embedding model not available');
            return false;
        }
        
        try {
            console.log(`Attempting to store memory: "${text.substring(0, 100)}..."`);
            
            // Set flag to indicate this is a vector memory operation
            this._isVectorMemoryOperation = true;
            
            // Generate embedding for the memory text
            console.log('Generating embedding...');
            const embedding = await this.getEmbedding(text);
            if (!embedding || embedding.length === 0) {
                console.warn('Failed to generate embedding for memory');
                return false;
            }
            console.log(`Generated embedding (${embedding.length} dimensions)`);
            
            // Generate a unique ID (numeric timestamp instead of string)
            const id = Date.now();
            
            // Store memory with metadata
            console.log(`Storing to collection: ${this.collectionName}`);
            await this.vectorClient.upsert(this.collectionName, {
                points: [{
                    id: id,
                    vector: embedding,
                    payload: {
                        text: text,
                        timestamp: new Date().toISOString(),
                        ...metadata
                    }
                }]
            });
            
            console.log(`âœ… Successfully stored memory: "${text.substring(0, 50)}..."`);
            return true;
        } catch (error) {
            console.error('Error storing memory:', error);
            return false;
        }
    }

    // Modify retrieveRelevantMemories to set a flag before calling getEmbedding
    async retrieveRelevantMemories(query, limit = 10) {
        if (!this.vectorClient || !this.embedding_model) {
            console.warn('Cannot retrieve memories: Vector client or embedding model not available');
            return "No long-term memories available.";
        }
        
        try {
            console.log(`Retrieving memories relevant to: "${query.substring(0, 100)}..."`);
            
            // Set flag to indicate this is a vector memory operation
            this._isVectorMemoryOperation = true;
            
            // Generate embedding for the query
            console.log('Generating query embedding...');
            const queryEmbedding = await this.getEmbedding(query);
            if (!queryEmbedding || queryEmbedding.length === 0) {
                console.warn('Failed to generate embedding for query');
                return "No long-term memories available.";
            }
            console.log(`Generated query embedding (${queryEmbedding.length} dimensions)`);
            
            // Search for similar memories
            console.log(`Searching collection "${this.collectionName}" for ${limit} relevant memories...`);
            const searchResults = await this.vectorClient.search(this.collectionName, {
                vector: queryEmbedding,
                limit: limit,
                with_payload: true,
                with_vectors: false
            });
            
            console.log(`Found ${searchResults?.length || 0} memories`);
            
            if (!searchResults || searchResults.length === 0) {
                return "No relevant long-term memories found.";
            }
            
            // Format the results
            let formattedResults = "Relevant long-term memories:\n\n";
            
            searchResults.forEach((result, index) => {
                const memory = result.payload.text;
                const timestamp = new Date(result.payload.timestamp).toLocaleString();
                const score = result.score.toFixed(2);
                
                console.log(`Memory ${index + 1}: Score: ${score}, Text: "${memory}..."`);
                
                formattedResults += `Memory ${index + 1} (relevance: ${score}):\n${memory}\n`;
                formattedResults += `Timestamp: ${timestamp}\n\n`;
            });
            
            return formattedResults;
        } catch (error) {
            console.error('Error retrieving memories:', error);
            return "Error retrieving long-term memories.";
        }
    }

    // Also update the replaceStrings method to handle $LONG_TERM_MEMORY placeholder
    async replaceStrings(prompt, messages, examples=null, to_summarize=[], last_goals=null) {
        // All existing replacements...
        
        // Improved handling for $LONG_TERM_MEMORY
        if (prompt.includes('$LONG_TERM_MEMORY')) {
            try {
                if (messages && messages.length > 0) {
                    const lastMessage = messages[messages.length - 1];
                    const relevantMemories = await this.retrieveRelevantMemories(lastMessage.content, 3);
                    prompt = prompt.replaceAll('$LONG_TERM_MEMORY', relevantMemories);
                } else {
                    prompt = prompt.replaceAll('$LONG_TERM_MEMORY', "No long-term memories available.");
                }
            } catch (error) {
                console.error('Error handling $LONG_TERM_MEMORY placeholder:', error);
                prompt = prompt.replaceAll('$LONG_TERM_MEMORY', "Error retrieving long-term memories.");
            }
        }
        
        // Rest of the method...
        
        // check if there are any remaining placeholders with syntax $<word>
        let remaining = prompt.match(/\$[A-Z_]+/g);
        if (remaining !== null) {
            console.warn('Unknown prompt placeholders:', remaining.join(', '));
        }
        return prompt;
    }

    // Rest of the Prompter class methods remain unchanged
}
